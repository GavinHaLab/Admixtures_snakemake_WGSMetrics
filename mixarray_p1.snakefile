# BEGIN SNAKEFILE 
# mixarray_p1.snakefile
# Matt Neel
# Month, 2021
# Ha Lab
# Fred Hutchinson Cancer Research Center

"""
# Before running snakemake, module load these packages in the terminal:
ml snakemake/5.19.2-foss-2019b-Python-3.7.4
ml BWA/0.7.17-foss-2018b
ml SAMtools/1.10-GCCcore-8.3.0
ml GATK/4.1.4.1-GCCcore-8.3.0-Java-11
ml picard/2.18.29-Java
ml R/4.0.3-foss-2020b 

# Use this command to run snakemake (remove -np at end when done validating):
snakemake -s mixarray_p1.snakefile --latency-wait 60 --keep-going --cluster-config config/cluster_slurm.yaml --cluster "sbatch -p {cluster.partition} --mem={cluster.mem} -t {cluster.time} -c {cluster.ncpus} -n {cluster.ntasks} -o {cluster.output}" -j 40 -np
"""

# ---------------------------------------
# Load the various configuration YAML files that we have
# Note that we can't reference samples2.yaml here because it cannot be made until we
# extract chromosomal DNA / remove duplicates to see how many reads are left
# We also cannot declare files here that do not exist yet
configfile: "config/samples1.yaml"
configfile: "config/config.yaml"
# print(config)
# for key in config:
# 	print(key, config[key])
# ---------------------------------------
# Rule that lists all the output files generated by the subsequent rules
rule all:
	input: 
		# Create the prepared source files once; they'll be used many times
		expand("results/sources/{samples}-chrsOnly.cram", samples=config["samples"]),
		expand("results/sources/{samples}-chrsOnly.dups_removed.cram", samples=config["samples"]),
		expand("results/sources/{samples}-chrsOnly.dups_removed_metrics.txt", samples=config["samples"]),
		expand("results/sources/{samples}-chrsOnly.dups_removed.alignment_summary_metrics.txt", samples=config["samples"]),
		expand("results/sources/{samples}-chrsOnly.dups_removed.WGS-metrics.txt", samples=config["samples"])


# ---------------------------------------
# These rules extract chromosomal DNA from the source.cram files using samtools
rule extractChromosomal:
	input:
		inBam = lambda wildcards: config["samples"][wildcards.samples]
	output:
		outBam = "results/sources/{samples}-chrsOnly.cram"
	params:
		sam = config["samtools"],
		chrs = config["chrs"], 
		ref=config["ref_genome"]
	log:
		logfile = "logs/sources/{samples}-extractChrs.txt"
	shell:
		"({params.sam} view -T {params.ref} -C {input.inBam} {params.chrs} | {params.sam} sort - > {output.outBam}) 2> {log.logfile}"

# ---------------------------------------
# These rules remove duplicates after the chromosomal extraction above using Picard tools (java)
rule removeDuplicates:
	input:
		inBam = "results/sources/{samples}-chrsOnly.cram"
	output:
		outBam = "results/sources/{samples}-chrsOnly.dups_removed.cram",
		metrics = "results/sources/{samples}-chrsOnly.dups_removed_metrics.txt"
	params:
		mem = config["java_mem"],
		picard = config["picard"]
	log:
		logfile = "logs/sources/{samples}-removeDuplicates.txt"
	shell:
		"(java {params.mem} -jar {params.picard} MarkDuplicates \
		INPUT={input.inBam} \
		OUTPUT={output.outBam} \
		METRICS_FILE={output.metrics} \
		REMOVE_DUPLICATES=true \
		CREATE_INDEX=false \
		ASSUME_SORT_ORDER=coordinate \
		VALIDATION_STRINGENCY=LENIENT \
		TMP_DIR=temp) 2> {log.logfile}"

# ---------------------------------------

# These rules get alignment metrics for the extracted/de-duplicated.crams above
rule createCODRmetrics:
	input:
		inBam = "results/sources/{samples}-chrsOnly.dups_removed.cram"
	output:
		metrics = "results/sources/{samples}-chrsOnly.dups_removed.alignment_summary_metrics.txt"
	params:
		mem = config["java_mem"],
		picard = config["picard"],
		ref = config["ref_genome"]
	log:
		logfile = "logs/sources/{samples}-CODR-metrics.txt"
	shell:
		"(java {params.mem} -jar {params.picard} CollectAlignmentSummaryMetrics \
		R={params.ref} \
		I={input.inBam} \
		O={output.metrics} \
		VALIDATION_STRINGENCY=LENIENT) 2> {log.logfile}"

rule getWgsMetrics:
	input:
		inBam="results/sources/{samples}-chrsOnly.dups_removed.cram"
	output:
		metrics="results/sources/{samples}-chrsOnly.dups_removed.WGS-metrics.txt"
	params:
		mem = config["java_mem"],
		picard = config["picard"], 
		ref = config["ref_genome"]
	log:
		logfile = "logs/sources/{samples}-WGS-metrics.txt"
	shell:
		"(java {params.mem} -jar {params.picard} CollectWgsMetrics \
		I={input.inBam} \
		O={output.metrics} \
		R={params.ref} \
		COUNT_UNPAIRED=true \
		USE_FAST_ALGORITHM=true \
		VALIDATION_STRINGENCY=LENIENT \
		INCLUDE_BQ_HISTOGRAM=true) 2> {log}"
# END SNAKEFILE
