# BEGIN SNAKEFILE 
# mixarray_p3.snakefile
# Matt Neel
# Month, 2021
# Ha Lab
# Fred Hutchinson Cancer Research Center

"""
# Before running snakemake, module load these packages in the terminal:
ml snakemake/5.19.2-foss-2019b-Python-3.7.4
ml BWA/0.7.17-foss-2018b
ml SAMtools/1.10-GCCcore-8.3.0
ml GATK/4.1.4.1-GCCcore-8.3.0-Java-11
ml picard/2.18.29-Java
ml R/4.0.3-foss-2020b 

# Use this command to run snakemake (remove -np at end when done validating):
snakemake -s mixarray_p3.snakefile --latency-wait 60 --keep-going --cluster-config config/cluster_slurm.yaml --cluster "sbatch -p {cluster.partition} --mem={cluster.mem} -t {cluster.time} -c {cluster.ncpus} -n {cluster.ntasks} -o {cluster.output} -J {cluster.JobName}" -j 40 -np
"""

# ---------------------------------------
# Load the various configuration YAML files that we have
# We don't need to reference samples1.yaml here because we don't need it anymore
configfile: "config/samples2.yaml"
configfile: "config/config.yaml"

# ---------------------------------------
# Create some functions we will need to generate file paths from wildcards
import glob

def getMergeInput(sampleID):
  return glob.glob(''.join(["results/downsamples/", sampleID, "_CODRdownsample.cram"]))

# ---------------------------------------
# Rule that lists all the output files generated by the subsequent rules
rule all:
	input: 
		# Create the prepared source files once; they'll be used many times
		expand("results/{mixtures}/{mixtures}_merge.cram", mixtures=config["mixtures"]),
		# expand("results/{mixtures}/{mixtures}_merge.crai", mixtures=config["mixtures"]),
		# expand("results/{mixtures}/{mixtures}_merge.cram.crai", mixtures=config["mixtures"]),
		expand("results/{mixtures}/{mixtures}_merge.alignment_summary_metrics.txt", mixtures=config["mixtures"]), 
		expand("results/{mixtures}/{mixtures}_merge.wgsMetrics.txt", mixtures=config["mixtures"])

# ---------------------------------------
# Now that the original samples have been chrom-extracted, de-duplicated and downsampled...
# Let's merge the results, create a symlink and provide metrics on the merged bam
rule mergeFiles:
	input:
		inBamT = lambda wildcards: getMergeInput(config["mixtures"][wildcards.mixtures][0]),
		inBamH = lambda wildcards: getMergeInput(config["mixtures"][wildcards.mixtures][1])
	output:
		outBam = "results/{mixtures}/{mixtures}_merge.cram"
		# outBai = "results/{mixtures}/{mixtures}_merge.crai"
	params:
		mem = config["java_mem"],
		picard = config["picard"]
	log:
		logfile = "logs/{mixtures}/{mixtures}_merge.txt"
	shell:
		"(java {params.mem} -jar {params.picard} MergeSamFiles \
		I={input.inBamT} \
		I={input.inBamH} \
		O={output.outBam} \
		CREATE_INDEX=true \
		USE_THREADING=true) 2> {log.logfile}"

# Note that this rule has an input file but does not actually use it
# This is by design to ensure a relative-path symlink is created using the path in params
# rule createSymlinks:
# 	input:
# 		inBai = "results/{mixtures}/{mixtures}_merge.crai"
# 	output:
# 		outBamBai = "results/{mixtures}/{mixtures}_merge.cram.crai"
# 	params:
# 		relpath = "{mixtures}_merge.crai"
# 	log:
# 		logfile = "logs/{mixtures}/{mixtures}_symlink.txt"
# 	shell:
# 		"(ln -s {params.relpath} {output.outBamBai}) 2> {log.logfile}"

# Here were create the metrics for the merge itself
rule createMergeMetrics:
	input:
		inBam = "results/{mixtures}/{mixtures}_merge.cram"
	output:
		metrics = "results/{mixtures}/{mixtures}_merge.alignment_summary_metrics.txt"
	params:
		mem = config["java_mem"],
		picard = config["picard"],
		ref = config["ref_genome"]
	log:
		logfile = "logs/{mixtures}/{mixtures}_merge-metrics.txt"
	shell:
		"(java {params.mem} -jar {params.picard} CollectAlignmentSummaryMetrics \
		R={params.ref} \
		I={input.inBam} \
		O={output.metrics} \
		VALIDATION_STRINGENCY=LENIENT) 2> {log.logfile}"

rule createMergeWgsMetrics:
	input:
		inBam = "results/{mixtures}/{mixtures}_merge.cram"
	output:
		metrics = "results/{mixtures}/{mixtures}_merge.wgsMetrics.txt"
	params:
		mem = config["java_mem"],
		picard = config["picard"], 
		ref = config["ref_genome"]
	log:
		logfile = "logs/{mixtures}/{mixtures}_WGS-metrics.txt"
	shell:
		"(java {params.mem} -jar {params.picard} CollectWgsMetrics \
		I={input.inBam} \
		O={output.metrics} \
		R={params.ref} \
		COUNT_UNPAIRED=true \
		USE_FAST_ALGORITHM=true \
		VALIDATION_STRINGENCY=LENIENT \
		INCLUDE_BQ_HISTOGRAM=true) 2> {log}"

## WGS METRICS AS WELL HERE

# END SNAKEFILE
