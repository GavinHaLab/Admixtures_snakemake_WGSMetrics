# BEGIN SNAKEFILE 
# mixarray_p2.snakefile
# Matt Neel
# Month, 2021
# Ha Lab
# Fred Hutchinson Cancer Research Center

"""
# Before running snakemake, module load these packages in the terminal:
ml snakemake/5.19.2-foss-2019b-Python-3.7.4
ml BWA/0.7.17-foss-2018b
ml SAMtools/1.10-GCCcore-8.3.0
ml GATK/4.1.4.1-GCCcore-8.3.0-Java-11
ml picard/2.18.29-Java
ml R/4.0.3-foss-2020b 

# Use this command to run snakemake (remove -np at end when done validating):
snakemake -s mixarray_p2.snakefile --latency-wait 60 --keep-going --cluster-config config/cluster_slurm.yaml --cluster "sbatch -p {cluster.partition} --mem={cluster.mem} -t {cluster.time} -c {cluster.ncpus} -n {cluster.ntasks} -o {cluster.output} --requeue " -j 40
"""

# ---------------------------------------
# Load the various configuration YAML files that we have
# We don't need to reference samples1.yaml here because we don't need it anymore
configfile: "config/samples2.yaml"
configfile: "config/config.yaml"

# ---------------------------------------
# Rule that lists all the output files generated by the subsequent rules
rule all:
	input: 
		# Create the prepared source files once; they'll be used many times
		expand("results/downsamples/{samples}_CODRdownsample.cram", samples=config["samples"])

# ---------------------------------------
# This takes the expanded sample list and downsamples everything we'll need for the mixtures
# We can't include the merge steps in this snakefile because snakemake will cause them to
# trigger before all the necessary mixing partners have been downsampled, leading to an error
rule downsample:
	input:
		inBam = lambda wildcards: config["samples"][wildcards.samples][1]
	output:
		outBam = "results/downsamples/{samples}_CODRdownsample.cram"
	params:
		mem = config["java_mem"],
		picard = config["picard"],
		probs = lambda wildcards: config["samples"][wildcards.samples][0]
	log:
		logfile = "logs/downsamples/{samples}_downsample.txt"
	shell:
		"(java {params.mem} -jar {params.picard} DownsampleSam \
		I={input.inBam} \
		O={output.outBam} \
		CREATE_INDEX=false \
		PROBABILITY={params.probs} \
		STRATEGY=ConstantMemory \
		ACCURACY=1.0E-4) 2> {log.logfile}"

# END SNAKEFILE
